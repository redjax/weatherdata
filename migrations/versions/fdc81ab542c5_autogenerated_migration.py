"""autogenerated migration

Revision ID: fdc81ab542c5
Revises: fda24ca3a9db
Create Date: 2025-03-13 00:18:03.336163

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "fdc81ab542c5"
down_revision: Union[str, None] = "fda24ca3a9db"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def return_postcode_type():
    ## Custom type for the 'postcodes' column of a *LocationModel class
    postcodes_type = sa.JSON() if op.get_bind().dialect.name != "sqlite" else sa.TEXT()

    return postcodes_type


def upgrade() -> None:
    """Upgrade schema."""
    postcodes_type = return_postcode_type()
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "openmeteo_location",
        sa.Column("location_id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("id", sa.NUMERIC(), nullable=False),
        sa.Column("name", sa.TEXT(), nullable=False),
        sa.Column("latitude", sa.NUMERIC(precision=12, scale=2), nullable=False),
        sa.Column("longitude", sa.NUMERIC(precision=12, scale=2), nullable=False),
        sa.Column("elevation", sa.NUMERIC(precision=12, scale=2), nullable=False),
        sa.Column("feature_code", sa.TEXT(), nullable=False),
        sa.Column("country_code", sa.TEXT(), nullable=False),
        sa.Column("admin1_id", sa.NUMERIC(), nullable=False),
        sa.Column("admin2_id", sa.NUMERIC(), nullable=False),
        sa.Column("admin3_id", sa.NUMERIC(), nullable=False),
        sa.Column("timezone", sa.TEXT(), nullable=False),
        sa.Column("population", sa.NUMERIC(), nullable=False),
        sa.Column("postcodes", postcodes_type, nullable=False),
        sa.Column("country_id", sa.NUMERIC(), nullable=False),
        sa.Column("country", sa.TEXT(), nullable=False),
        sa.Column("admin1", sa.TEXT(), nullable=False),
        sa.Column("admin2", sa.TEXT(), nullable=False),
        sa.Column("admin3", sa.TEXT(), nullable=False),
        sa.PrimaryKeyConstraint("location_id"),
        sa.UniqueConstraint("id", name="_id_uc"),
        sa.UniqueConstraint("location_id"),
    )
    op.create_index(
        op.f("ix_openmeteo_location_id"), "openmeteo_location", ["id"], unique=True
    )
    op.create_table(
        "weatherapi_forecast_json",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("forecast_json", sa.JSON(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    op.create_table(
        "weatherapi_location",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("name", sa.TEXT(), nullable=False),
        sa.Column("region", sa.TEXT(), nullable=False),
        sa.Column("country", sa.TEXT(), nullable=False),
        sa.Column("lat", sa.NUMERIC(precision=12, scale=2), nullable=False),
        sa.Column("lon", sa.NUMERIC(precision=12, scale=2), nullable=False),
        sa.Column("tz_id", sa.TEXT(), nullable=False),
        sa.Column("localtime_epoch", sa.NUMERIC(), nullable=False),
        sa.Column("localtime", sa.TEXT(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
        sa.UniqueConstraint("name", "country", name="_name_country_uc"),
    )
    op.create_table(
        "weatherapi_current_weather",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("last_updated_epoch", sa.INTEGER(), nullable=False),
        sa.Column("last_updated", sa.TEXT(), nullable=False),
        sa.Column("temp_c", sa.NUMERIC(precision=12, scale=2), nullable=False),
        sa.Column("temp_f", sa.NUMERIC(precision=12, scale=2), nullable=False),
        sa.Column("is_day", sa.NUMERIC(), nullable=False),
        sa.Column("wind_mph", sa.NUMERIC(precision=12, scale=2), nullable=False),
        sa.Column("wind_kph", sa.NUMERIC(precision=12, scale=2), nullable=False),
        sa.Column("wind_degree", sa.NUMERIC(), nullable=False),
        sa.Column("wind_dir", sa.TEXT(), nullable=False),
        sa.Column("pressure_mb", sa.NUMERIC(precision=12, scale=2), nullable=False),
        sa.Column("pressure_in", sa.NUMERIC(precision=12, scale=2), nullable=False),
        sa.Column("precip_mm", sa.NUMERIC(precision=12, scale=2), nullable=False),
        sa.Column("precip_in", sa.NUMERIC(precision=12, scale=2), nullable=False),
        sa.Column("humidity", sa.NUMERIC(), nullable=False),
        sa.Column("cloud", sa.NUMERIC(), nullable=False),
        sa.Column("feelslike_c", sa.NUMERIC(precision=12, scale=2), nullable=False),
        sa.Column("feelslike_f", sa.NUMERIC(precision=12, scale=2), nullable=False),
        sa.Column("windchill_c", sa.NUMERIC(precision=12, scale=2), nullable=False),
        sa.Column("windchill_f", sa.NUMERIC(precision=12, scale=2), nullable=False),
        sa.Column("heatindex_c", sa.NUMERIC(precision=12, scale=2), nullable=False),
        sa.Column("heatindex_f", sa.NUMERIC(precision=12, scale=2), nullable=False),
        sa.Column("dewpoint_c", sa.NUMERIC(precision=12, scale=2), nullable=False),
        sa.Column("dewpoint_f", sa.NUMERIC(precision=12, scale=2), nullable=False),
        sa.Column("vis_km", sa.NUMERIC(precision=12, scale=2), nullable=False),
        sa.Column("uv", sa.NUMERIC(precision=12, scale=2), nullable=False),
        sa.Column("gust_mph", sa.NUMERIC(precision=12, scale=2), nullable=False),
        sa.Column("gust_kph", sa.NUMERIC(precision=12, scale=2), nullable=False),
        sa.Column("location_id", sa.INTEGER(), nullable=False),
        sa.ForeignKeyConstraint(
            ["location_id"],
            ["weatherapi_location.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
        sa.UniqueConstraint("last_updated_epoch"),
    )
    op.create_table(
        "weatherapi_air_quality",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("co", sa.NUMERIC(precision=12, scale=2), nullable=False),
        sa.Column("no2", sa.NUMERIC(precision=12, scale=2), nullable=False),
        sa.Column("o3", sa.NUMERIC(precision=12, scale=2), nullable=False),
        sa.Column("so2", sa.NUMERIC(precision=12, scale=2), nullable=False),
        sa.Column("pm2_5", sa.NUMERIC(precision=12, scale=2), nullable=False),
        sa.Column("pm10", sa.NUMERIC(precision=12, scale=2), nullable=False),
        sa.Column("us_epa_index", sa.NUMERIC(), nullable=False),
        sa.Column("gb_defra_index", sa.NUMERIC(), nullable=False),
        sa.Column("weather_id", sa.INTEGER(), nullable=False),
        sa.ForeignKeyConstraint(
            ["weather_id"],
            ["weatherapi_current_weather.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    op.create_table(
        "weatherapi_current_condition",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("text", sa.TEXT(), nullable=False),
        sa.Column("icon", sa.TEXT(), nullable=False),
        sa.Column("code", sa.NUMERIC(), nullable=False),
        sa.Column("weather_id", sa.INTEGER(), nullable=False),
        sa.ForeignKeyConstraint(
            ["weather_id"],
            ["weatherapi_current_weather.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    postcodes_type = return_postcode_type()

    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("weatherapi_current_condition")
    op.drop_table("weatherapi_air_quality")
    op.drop_table("weatherapi_current_weather")
    op.drop_table("weatherapi_location")
    op.drop_table("weatherapi_forecast_json")
    op.drop_index(op.f("ix_openmeteo_location_id"), table_name="openmeteo_location")
    op.drop_table("openmeteo_location")
    # ### end Alembic commands ###
