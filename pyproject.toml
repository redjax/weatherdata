[project]
name = "weatherdata"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "api",
    "celery>=5.4.0",
    "cli",
    "core-utils",
    "database",
    "depends",
    "domain",
    "fastparquet>=2024.11.0",
    "http-lib",
    "pandas>=2.2.3",
    "psycopg2-binary>=2.9.10",
    "pyarrow>=18.1.0",
    "pymysql>=1.1.1",
    "scheduling",
    "settings",
    "setup",
    "weather-client",
]

[project.scripts]
cli = "weather_cli.main:app"

[tool.uv.sources]
weatherdata = { workspace = true }
domain = { workspace = true }
http-lib = { workspace = true }
setup = { workspace = true }
core-utils = { workspace = true }
settings = { workspace = true }
weather-client = { workspace = true }
database = { workspace = true }
depends = { workspace = true }
cli = { workspace = true }
scheduling = { workspace = true }
api = { workspace = true }

[tool.uv.workspace]
members = ["packages/*", "applications/*"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.setuptools]
py-modules = []

[tool.hatch.build.targets.wheel]
packages = ["packages/*", "applications/*"]

[dependency-groups]
dev = [
    "alembic>=1.14.0",
    "nox>=2024.10.9",
    "pytest-xdist>=3.6.1",
    "ruff>=0.8.4",
]

[tool.pytest.ini_options]
filterwarnings = ["error", "ignore::UserWarning"]
testpaths = ["tests"]

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "D",    # pydocstyle
    "E",    # pycodestyle
    "F401", # remove unused imports
    "I",    # isort
    "I001", # Unused imports
]
ignore = [
    "D100", # missing-docstring-in-public-module
    "D101", # missing-docstring-in-public-class
    "D102", # missing-docstring-in-public-method
    "D103", # Missing docstring in public function
    "D105", # Missing docstring in magic method
    "D106", # missing-docstring-in-public-nested-class
    "D107", # Missing docstring in __init__
    "D200", # One-line docstring should fit on one line
    "D203", # one-blank-line-before-class
    "D205", # 1 blank line required between summary line and description
    "D213", # multi-line-summary-second-line
    "D401", # First line of docstring should be in imperative mood
    "E402", # Module level import not at top of file
    "D406", # Section name should end with a newline
    "D407", # Missing dashed underline after section
    "D414", # Section has no content
    "D417", # Missing argument descriptions in the docstring for [variables]
    "E501", # Line too long
    "E722", # Do not use bare `except`
    "F401", # imported but unused
]
fixable = [
    "C",
    "D",    # pydocstyle
    "E",    # pycodestyle-error
    "E402", # Module level import not at top of file
    "F401", # unused imports
    "I",    # isort
    "N",    # pep8-naming
    "T",
    "W",    # pycodestyle-warning
    "ERA",  # eradicate
    "PL",   # pylint
    "RUF",  # ruf-specific rules
    "TID",  # flake8-tidy-imports
    "TRY",  # tryceratops
    "UP",   # pyupgrade
]

exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".ruff_cache",
    ".venv",
    "__pypackages__",
    "__pycache__",
    "*.pyc",
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["D104"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.isort]
combine-as-imports = true
force-sort-within-sections = true
force-wrap-aliases = true
## Use a single line after each import block.
lines-after-imports = 1
## Use a single line between direct and from import
# lines-between-types = 1
## Order imports by type, which is determined by case,
#  in addition to alphabetically.
order-by-type = true
relative-imports-order = "closest-to-furthest"
## Automatically add imports below to top of files
required-imports = ["from __future__ import annotations"]
## Define isort section priority
section-order = [
    "future",
    "standard-library",
    "first-party",
    "local-folder",
    "third-party",
]
